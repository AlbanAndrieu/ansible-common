---
# This playbook contains common plays that will be run on all nodes.

- name: common | Update APT caches.
  apt: update_cache=yes cache_valid_time={{ apt_cache_valid_time }}
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  
- name: common | Update the configuration
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  template:
    src: etc_apt_apt.conf.d_10general.j2
    dest: /etc/apt/apt.conf.d/10general
    owner: root
    group: root
    mode: 0644
  
- name: common | Make sure the required packages are installed
  apt: pkg={{ item }} state=present
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and python_enabled == true
  with_items:
    - python-apt
    - python-pycurl
    - unattended-upgrades

- name: common | Upgrade system
  apt: upgrade={{ apt_upgrade }}
  when: apt_upgrade == "safe" or apt_upgrade == "full" or apt_upgrade == "dist"  
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
#  ignore_errors: yes
  
- name: common | Checking if Sources are Available
  action: shell echo a$(cat /etc/apt/sources.list | grep $(echo   'http://url/{{ ansible_distribution }}/stable' | tr "[:upper:]" "[:lower:]"  ))
  register: sources
  ignore_errors: True
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  
- debug: msg=" common | sources value is {{ sources.stdout }} "

- name: common | Adding source.
  action: shell echo "deb http://url/{{ ansible_distribution }}/stable      {{ ansible_lsb.codename }} main" | tr "[:upper:]" "[:lower:]" >> /etc/apt/sources.list
  when: "ansible_distribution == 'Debian' and sources.stdout == 'a'"  
#      when: "ansible_os_family == 'RedHat' and sources.stdout == 'a'"

# ansible
- name: common | Test ansible is installed
  shell: ansible --version
  register: ansible_is_installed
  ignore_errors: yes

- name: common | Run install script as sudo
  script: setup-ansible.sh
  sudo: yes
  when: "ansible_is_installed|failed and (ansible_distribution == 'Ubuntu' or ansible_distribution == 'CentOS')"
  register: ansible_init_used_sudo

- name: common | Run install script without sudo
  script: setup-ansible.sh
  when: ansible_is_installed|failed and ansible_init_used_sudo|skipped

- name: common | Test ansible is installed
  shell: ansible --version

- name: common | Install update notification tools
  apt: pkg={{ item }} state=present update_cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and utilities_enabled == true
  tags: package  
  with_items:
   - apticron

- name: common | Update the update notification configuration
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  template:
    src: apticron.conf.j2
    dest: /etc/apticron/apticron.conf
    owner: root
    group: root
    mode: 0644

- name: common | Install utility tools
  apt: pkg={{ item }} state=present update_cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and utilities_enabled == true
  tags: package  
  with_items:
   - wget
   - curl
   - ssh  
   
- name: common | Install monitoring tools
  apt: pkg={{ item }} state=present update_cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled == true
  tags: package  
  with_items:   
   - nmap  
   - iotop
   - htop
   - iftop
#   - monit   see https://galaxy.ansible.com/list#/roles/1575
   - upstart
   - gksu

#TO CHECK sudo aptitude install cowsay fortunes fortunes-fr
- name: common | Install cowsay
  apt: pkg={{ item }} state=present update_cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and cowsay_enabled == true
  tags: package  
  with_items:   
   - aptitude
   - randomize-lines
   - cowsay 
   - fortunes 
   - fortunes-fr   
    
- name: common | Install perl
  apt: pkg={{ item }} state=present update_cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and perl_enabled == true
  tags: package  
  with_items:
   - perl       
   - libnet-ssleay-perl
   - openssl
   - libauthen-pam-perl
   - libpam-runtime
   - libio-pty-perl

- name: common | Install python
  apt: pkg={{ item }} state=present update_cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and python_enabled == true
  tags: package   
  with_items:
   - python
   - python-pip 
   - python-dev 
   - python-keyczar
   - python-setuptools
   - python-software-properties   
   - build-essential

- name: common | Install winrm python module for ansible to work on windows
  command: sudo pip install https://github.com/diyan/pywinrm/archive/df049454a9309280866e0156805ccda12d71c93a.zip --upgrade
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and python_enabled == true
  tags: package   

#- name: Installing common packages.
#  apt: state=present pkg={{ item }}
#  with_items:
#  - libcap2-bin
#  - libssl-dev   
    
#below it can be customized
- name: common | Append additional sources
  apt_repository: repo={{ item }} update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'    
  with_items: apt_repositories

- name: common | Install additional packages
  apt: pkg={{item}}
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'       
  when: apt_install_packages 
  with_items: apt_install_packages_list  
