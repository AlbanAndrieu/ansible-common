---
# This playbook contains common plays that will be run on all nodes.

- name: common | Update APT caches.
  apt: update_cache=yes cache_valid_time={{ apt_cache_valid_time }}
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  become: true
  tags: vm

- name: common | Update the configuration
  template:
    src: etc_apt_apt.conf.d_10general.j2
    dest: /etc/apt/apt.conf.d/10general
    owner: root
    group: root
    mode: 0644
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  become: true
  tags: vm

- name: common | Update the proxy configuration
  template:
    src: etc_apt.conf
    dest: /etc/apt/apt.conf
    owner: root
    group: root
    mode: 0644
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apt_install_proxy_enabled
  tags: vm

- name: common | Make sure the required packages are installed
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - aptitude
    - unattended-upgrades
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and python_enabled
  become: true
  ignore_errors: true

- name: common | Make sure the required python packages are installed
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - python-keyczar
    - python-setuptools
    - build-essential
    - python-apt
    - python-pycurl
  when: ((ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version is version_compare(18.04, '<=')) and python_enabled
  become: true
  tags:
    - pip
    - python

- name: common | Make sure the required python packages are installed
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - python-software-properties
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ("12.04", "14.04", "16.04") and python_enabled
  become: true

- name: common | Make sure the required python packages are installed
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - software-properties-common
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ("12.04", "14.04", "16.04") and python_enabled
  become: true

- name: common | Make sure the required python packages are installed
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - python-pip
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat') and python_enabled
  become: true
  ignore_errors: true
  tags:
    - pip
    - python

- name: common | Upgrade system
  apt: upgrade={{ apt_upgrade }}
  when: (apt_upgrade == "safe" or apt_upgrade == "full" or apt_upgrade == "dist") and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and repo_upgrade_system_enabled
  become: true
  tags:
    - upgrade
    - vm

- name: common | Upgrade system # noqa 403
  yum: name=* state={{ yum_upgrade }}
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat') and repo_upgrade_system_enabled
  become: true
  tags:
    - upgrade
    - vm

- name: common | Clean repo cache
  command: "apt-get autoremove"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and repo_clean_system_enabled
  become: true
  tags:
    - clean
    - vm

- name: common | Clean repo cache
  command: "rm -fr /var/cache/yum/* && yum clean all"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat') and repo_clean_system_enabled
  become: true
  tags:
    - clean
    - vm

- name: common | Checking if Sources are Available
  action: shell echo a$(cat /etc/apt/sources.list | grep $(echo   'http://url/{{ ansible_distribution }}/stable' | tr "[:upper:]" "[:lower:]"  ))
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  register: sources
  ignore_errors: true
  become: true
  tags: vm

- debug: msg=" common | sources value is {{ sources.stdout }} "
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  ignore_errors: true

- name: common | Adding source.
  action: shell echo "deb http://url/{{ ansible_distribution }}/stable      {{ ansible_lsb.codename }} main" | tr "[:upper:]" "[:lower:]" >> /etc/apt/sources.list
  when: (ansible_distribution == 'Debian' and sources.stdout == 'a')
  become: true
  tags:
    - package
    - vm

- name: common | Install update notification tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - apticron
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and utilities_enabled
  become: true
  tags:
    - package
    - vm

- name: common | Update the update notification configuration
  template:
    src: apticron.conf.j2
    dest: /etc/apticron/apticron.conf
    owner: root
    group: root
    mode: 0644
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and utilities_enabled
  become: true
  tags: vm

- name: common | Install tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  with_items:
    - upstart
    - gksu             # https://itsfoss.com/gksu-replacement-ubuntu/
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version in ['12.04', '14.04', '16.04'])
  become: true
  tags:
    - package
    - vm

- name: common | Install basic tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ common_pkg_state|default('present') }}"
  with_items:
    - screen
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  become: true
  ignore_errors: true
  tags:
    - package
    - vm

- name: common | Install utility tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - wget
    - curl
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and utilities_enabled
  become: true
  tags: package

- name: common | Install ssh tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - ssh
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and utilities_enabled
  become: true
  tags:
    - package
    - vm

- name: common | Install compression package
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ jenkins_pkg_state|default('present') }}"
  with_items:
    - tar
    - zip
    - unzip
    - bzip2
  become: true

- name: Install simple editor tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - vim
    - nano
    - dos2unix
  ignore_errors: true
  become: true
  tags:
    - editor

- name: Install editor tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - gedit
    - geany
    - meld
  ignore_errors: true
  become: true
  tags:
    - editor
    - vm

#See https://blog.serverdensity.com/80-linux-monitoring-tools-know/

- name: common | Install monitoring tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - nmap
    - iotop
    - iftop
    - htop
    - sysstat
    - dstat
  ignore_errors: true
  become: true
  tags:
    - package
    - vm

- name: common | Install monitoring tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - jnettop
    - iperf
#    - monit   # see https://galaxy.ansible.com/list#/roles/1575
    - powertop
    - discus
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  ignore_errors: true
  become: true
  tags:
    - package
    - vm

# apt-cache policy ubuntu-restricted-extras
# check for multiverse

- name: common | Install extra
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - ubuntu-restricted-extras
#    - preload
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and (ansible_distribution_version not in ['12.04'])
  become: true
  ignore_errors: true
  tags:
    - package
    - vm

# TO CHECK sudo aptitude install cowsay fortunes fortunes-fr

- name: common | Install cowsay randomize lines
  apt_repository: repo="ppa:inameiname/stable" state={{ util_repository_state|default('present') }} update_cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and (ansible_distribution_version in ['16.04']) and cowsay_enabled
  ignore_errors: true
  become: true
  tags:
    - cowsay
    - vm

- name: common | Install cowsay randomize lines
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - randomize-lines
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04','14.04','16.04'] and cowsay_enabled
  become: true
  ignore_errors: true
  tags:
    - package
    - cowsay
    - vm

- name: common | Install cowsay
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - cowsay
    - fortunes
    - fortunes-fr
  ignore_errors: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and cowsay_enabled
  become: true
  tags:
    - package
    - cowsay
    - vm

- name: common | Install perl
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - perl
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and perl_enabled
  tags: package

- name: common | Install perl
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  with_items:
    - libnet-ssleay-perl
#   - openssl
    - libauthen-pam-perl
    - libpam-runtime
    - libio-pty-perl
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and perl_enabled
  become: true
  tags: package

# below it can be customized
- name: common | Append additional sources
  apt_repository: repo={{ item }} update_cache=yes
  with_items: "{{ apt_repositories }}"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apt_install_repositories
  become: true

- name: common | Install additional packages
  apt: pkg={{ item }}
  with_items: "{{ apt_install_packages_list }}"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apt_install_packages
  become: true
  tags:
    - package
