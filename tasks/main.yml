---
# This playbook contains common plays that will be run on all nodes.

- name: common | Update APT caches.
  apt: update_cache=yes cache_valid_time={{ apt_cache_valid_time }}
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  become: yes

- name: common | Update the configuration
  template:
    src: etc_apt_apt.conf.d_10general.j2
    dest: /etc/apt/apt.conf.d/10general
    owner: root
    group: root
    mode: 0644
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  become: yes

- name: common | Update the proxy configuration
  template:
    src: etc_apt.conf
    dest: /etc/apt/apt.conf
    owner: root
    group: root
    mode: 0644
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apt_install_proxy_enabled

- name: common | Make sure the required packages are installed
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }}"
  with_items:
    - python-apt
    - python-pycurl
    - aptitude
    - unattended-upgrades
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and python_enabled

- name: common | Upgrade system
  apt: upgrade={{ apt_upgrade }}
  become: yes
  when: (apt_upgrade == "safe" or apt_upgrade == "full" or apt_upgrade == "dist") and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and repo_upgrade_system_enabled

- name: common | Upgrade system
  yum: name=* state=latest
  become: yes
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat') and repo_upgrade_system_enabled

- name: common | Clean repo cache
  command: "apt-get autoremove"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and repo_clean_system_enabled

- name: common | Clean repo cache
  command: "rm -fr /var/cache/yum/* && yum clean all && yum check-update "
  become: yes
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat') and repo_clean_system_enabled

- name: common | Checking if Sources are Available
  action: shell echo a$(cat /etc/apt/sources.list | grep $(echo   'http://url/{{ ansible_distribution }}/stable' | tr "[:upper:]" "[:lower:]"  ))
  register: sources
  ignore_errors: true
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

- debug: msg=" common | sources value is {{ sources.stdout }} "
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

- name: common | Adding source.
  action: shell echo "deb http://url/{{ ansible_distribution }}/stable      {{ ansible_lsb.codename }} main" | tr "[:upper:]" "[:lower:]" >> /etc/apt/sources.list
  become: yes
  when: (ansible_distribution == 'Debian' and sources.stdout == 'a')
#      when: "ansible_os_family == 'RedHat' and sources.stdout == 'a'"

- name: common | Test ansible is installed
  shell: ansible --version
  register: ansible_is_installed
  ignore_errors: yes
#  become: yes

- name: common | Run install script as sudo
  script: setup-ansible.sh
  args:
    executable: /bin/bash
  become: yes
  ignore_errors: yes
  when: "ansible_is_installed|failed and (ansible_distribution == 'Ubuntu' or ansible_distribution == 'CentOS')"
  register: ansible_init_used_sudo

- name: common | Run install script without sudo
  script: setup-ansible.sh
  become: yes
  ignore_errors: yes
  when: ansible_is_installed|failed and ansible_init_used_sudo|skipped

- name: common | Test ansible is installed
  shell: ansible --version
  become: yes
  ignore_errors: yes

- name: common | Install update notification tools
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }}"
  tags: package
  with_items:
   - apticron
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and utilities_enabled

- name: common | Update the update notification configuration
  template:
    src: apticron.conf.j2
    dest: /etc/apticron/apticron.conf
    owner: root
    group: root
    mode: 0644
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and utilities_enabled

- name: common | Install basic tools
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }} update_cache=yes"
  tags: package
  with_items:
   - upstart
   - gksu
   - screen
  become: yes
  ignore_errors: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

- name: common | Install utility tools
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }}"
  tags: package
  with_items:
   - wget
   - curl
   - ssh
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and utilities_enabled

- name: common | Install compression package
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ jenkins_pkg_state|default('present') }}"
  with_items:
    - tar
    - zip
    - unzip
    - bzip2
  become: yes
#  ignore_errors: true

- name: common | Install editor tools
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }}"
  tags: package
  with_items:
#   - apt-show-versions
   - geany
#   - xxdiff #Not available on Ubuntu
#   - xxdiff-scripts
  become: yes
  ignore_errors: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

- name: Install editor tools
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }}"
  tags: package
  with_items:
   - vim
   - nano
   - gedit
   - meld
   - dos2unix
  ignore_errors: true
  become: yes

#See https://blog.serverdensity.com/80-linux-monitoring-tools-know/

- name: common | Install monitoring tools
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }}"
  tags: package
  with_items:
   - nmap
   - iotop
   - iftop
   - htop
   - sysstat
   - dstat
  ignore_errors: true
  become: yes

- name: common | Install monitoring tools
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }}"
  tags: package
  with_items:
   - jnettop
   - iperf
#   - monit   see https://galaxy.ansible.com/list#/roles/1575
   - upstart
   - gksu
   - powertop
   - discus
  ignore_errors: true
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled

- name: common | Install extra
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }}"
  tags: package
  with_items:
   - ubuntu-restricted-extras
#   - preload
  become: yes
  ignore_errors: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and (ansible_distribution_version not in ['12.04'])

#TO CHECK sudo aptitude install cowsay fortunes fortunes-fr

- name: common | Install cowsay randomize lines
  apt_repository: repo="ppa:inameiname/stable" state={{ util_repository_state|default('present') }} update_cache=yes
  ignore_errors: true
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and (ansible_distribution_version in ['16.04']) and cowsay_enabled
  tags: cowsay

- name: common | Install cowsay randomize lines
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }}"
  ignore_errors: true
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04','14.04','16.04'] and cowsay_enabled
  tags: cowsay
  with_items:
   - randomize-lines

- name: common | Install cowsay
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }}"
  tags: package
  with_items:
   - cowsay
   - fortunes
   - fortunes-fr
  ignore_errors: true
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and cowsay_enabled

- name: common | Install perl
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }}"
  tags: package
  with_items:
   - perl
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and perl_enabled

- name: common | Install perl
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }}"
  tags: package
  with_items:
   - libnet-ssleay-perl
#   - openssl
   - libauthen-pam-perl
   - libpam-runtime
   - libio-pty-perl
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and perl_enabled

- name: common | Install python tools
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ common_pkg_state|default('present') }}"
  tags: package
  with_items:
#  - python
#  - python-pip
#  - python-dev
   - python-keyczar
   - python-setuptools
   - python-software-properties
   - build-essential
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and python_enabled

#TODO Disable ipv6
#http://www.neuraldump.com/2016/11/how-to-disable-ipv6-in-ubuntu-16-04-xenial-xerus/

#below it can be customized
- name: common | Append additional sources
  apt_repository: repo={{ item }} update_cache=yes
  with_items: "{{apt_repositories}}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apt_install_repositories

- name: common | Install additional packages
  apt: pkg={{item}}
  with_items: "{{apt_install_packages_list}}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apt_install_packages
